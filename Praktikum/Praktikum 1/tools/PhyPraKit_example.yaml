# This is a comment line. You can write as many comment lines as you want into
# your yaml-file. If you want to use this file to process your data best create 
# a copy of the file in your working environment and adapt the data points, 
# uncertainties, and model function that you want to fit to the data points to 
# your measurement. You can then perform a fit of the model to the data with 
# help of the script run_phyFit.py as described in the document "Verwendung der 
# Skripte von der PhyPraKit-Sammlung"

# Give a title to the plot that will be displayed after the fit of the model to
# the data points
title: "Beispiel aus Datei 'PhyPraKit_example.yaml'"
# Give an x-axis title
x_label: 'x-Werte'
# Give a y-axis title
y_label: 'y-Werte'
# This will be the label of the data points that will by shown in a legend
label: Zufallsdaten
# These are the x-values of the example data points
x_data: [0., 0.2, 0.4, 0.6, 0.8, 1., 1.2, 1.4, 1.6, 1.8, 2., 2.2, 2.4, 2.6]
# these are the uncertainties in the x-values
x_errors: [0.01,0.015,0.02,0.025,0.03,0.035,0.04,0.045,0.05,0.055,0.06,
           0.065,0.07,0.075]
# These are the y-values of the example data points
y_data: [1.149, 0.712, 0.803, 0.464, 0.398, 0.355, 0.148,
         0.328, 0.181, 0.140, 0.0651, 0.005, -0.005, 0.116]
# Here you see only one value which is applied to the y-values of all data 
# points in this case 
y_errors: 0.07
# This is the label of the model function that has been fitted to the data 
# points
model_label: 'Exponential'
# This is the model function to be fitted to the data points. Note the symbol 
# "|" following the yaml-keyword "model_function". This symbol is followed by 
# the definition of the function in python. You can use all preinstalled 
# python libraries, like e.g. numpy (np) for the definition of the model 
# function
model_function: |
    def exp_model(x, A=1., x0=1.):
      return A*np.exp(-x/x0)
